function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

function initializeAwsSdk() {
  var creds = new AWS.CognitoIdentityCredentials({
    IdentityPoolId: '<%= ENV.fetch('AWS_IDENTITY_POOL_ID', nil) %>'
  });
  AWS.config = {
    credentials: creds,
    region: 'us-east-1',
    lexruntime: '2016-11-28',
    polly: '2016-06-10'
  };

  var polly = new AWS.Polly();
  var lex = new AWS.LexRuntime();
  return [polly, lex];
}

function initializePollyResponder(polly, audio) {
  window.pollyResponder = function(count) {
    var text = 'Count has now been incremented to ' + count + '. Pretty incredible.';
    var params = {
      OutputFormat: 'mp3',
      SampleRate: '22050',
      Text: text,
      TextType: 'text',
      VoiceId: 'Matthew'
    };

    polly.synthesizeSpeech(params, function(err, data) {
      if (err) {
        alert('polly error: ' + err);
      } else {
        var uInt8Array = new Uint8Array(data.AudioStream);
        var arrayBuffer = uInt8Array.buffer;
        var blob = new Blob([arrayBuffer]);
        var url = URL.createObjectURL(blob);
        audio.src = url;
        audio.play();
      }
    });
  }
}

function initializeLexSender(lex) {
  var sendToLex = function(stream) {
    var params = {
      botAlias: 'Playground',
      botName: 'Playground',
      contentType: 'audio/x-l16; sample-rate=16000',
      inputStream: stream,
      userId: guid(),
      accept: 'text/plain; charset=utf-8'
    };

    lex.postContent(params, function (err, data) {
      if (err) {
        alert('Lex doesn\'t think you said "increment counter"');
        console.log(err, err.stack);
      }
    });
  }

  return sendToLex;
}

function initializeSoundRecording(sendToLex) {
  var play = document.getElementById('play');
  var pause = document.getElementById('pause');
  var audioControl = new LexAudio.audioControl();
  var isRecording = false;

  var startAudioCapture = function(e) {
    if (!isRecording) {
      isRecording = !isRecording;
      play.classList.add('hidden');
      pause.classList.remove('hidden');
      audioControl.startRecording();
    }
  };

  var endAudioCapture = function(e) {
    if (isRecording) {
      isRecording = !isRecording;
      play.classList.remove('hidden');
      pause.classList.add('hidden');
      audioControl.stopRecording();
      audioControl.exportWAV(function(blob){
        sendToLex(blob);
      });
    }
  };

  play.addEventListener('click', startAudioCapture, true);
  pause.addEventListener('click', endAudioCapture, true);
}

$(document).on('turbolinks:load', () => {
  var [polly, lex] = initializeAwsSdk();

  var audio = new Audio();
  initializePollyResponder(polly, audio);

  var sendToLex = initializeLexSender(lex);

  initializeSoundRecording(sendToLex);
});
